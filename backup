#!/bin/sh

# $Id: backup,v 1.26 2004-01-12 10:02:13 turbo Exp $

DATE=`date +"%Y%m%d"`
BACKUPDIR=/var/.backups
BACKUPFILE1=$BACKUPDIR/System/confs-$DATE.tar.bz2
BACKUPFILE2=$BACKUPDIR/MySQL/mysql-$DATE.sql.bz2
BACKUPFILE4=$BACKUPDIR/OpenAFS/afsd-$DATE.gz
BACKUPFILE5=/etc/dpkg/selections-$DATE.gz
BACKUPFILE6=$BACKUPDIR/Important/important-$DATE.tar.bz2
BACKUPFILE7=$BACKUPDIR/Logs/oldlogs-$DATE.tar.bz2
BACKUPFILE8=$BACKUPDIR/AFBackup/afbackup_var-$DATE.tar.bz2
BACKUPFILE9=$BACKUPDIR/PostgreSQL/postgresql-$DATE.sql.bz2
BACKUPFILE10=$BACKUPDIR/CVS/cvs-$DATE.tar.bz2
BACKUPFILES="$BACKUPFILE1 $BACKUPFILE2 $BACKUPFILE4 $BACKUPFILE6 $BACKUPFILE7 $BACKUPFILE9 $BACKUPFILE10"
BACKUPVOLDIR="/var/.backups-volumes" # Make sure this is the same dir as
				     # configured in /usr/local/sbin/backup_afs.sh

cd /

# --------------
# Get the CLI options...
BACKUP_TYPE=incr
if [ ! -z "$@" ]; then
    TEMP=`getopt -o hif --long help,incr,full -- "$@"`
    eval set -- "$TEMP"
    while true ; do
	case "$1" in
	    -h|--help)
		echo "Usage:   `basename $0` [option] [volume]"
		echo "Options: -h,--help    Show this help"
		echo "         -i,--incr    Incremental backup"
		echo "         -f,--full    Full backup"
		echo; echo "Default is to do a incremental backup"
		exit 0
		;;
	    -i|--incr)	BACKUP_TYPE=incr;;
	    -f|--full)	BACKUP_TYPE=full;;
	    *)		BACKUP_TYPE=full;;
	esac
    done
fi

echo "Starting system backup ($BACKUP_TYPE) at" `date +"%Y%m%d %H:%M:%S"`

# Support function
check_error () {
    local errcode=$1 ; shift
    local msg="$*"

    if [ "$errcode" = "0" ]; then
	echo "Successfully backed up $msg."
    else
	echo "Failed to backup $msg!"
    fi
}

# ----- A F S -----
DIR=etc/openafs
if [ -d "$DIR" ]; then
    /usr/local/bin/list_afs_vols.sh -f > $DIR/volumes.txt
    cd /  && tar cjpf $BACKUPFILE4 \
	$DIR/CellServDB $DIR/afs.conf* $DIR/ThisCell \
	$DIR/server $DIR/cacheinfo $DIR/volumes.txt \
	var/lib/openafs/db/*.DB0
    check_error "$?" "AFS database"
fi

# ----- P O S T G R E S Q L -----
TMPFILE=`tempfile -p psql.` ; chown postgres $TMPFILE ; chmod 600 $TMPFILE
su postgres -c "/usr/lib/postgresql/bin/pg_dumpall -c > $TMPFILE 2> /dev/null"
code=$? ; check_error "$code" "PostgreSQL database(s)"
if [ "$code" != "0" ]; then
    #  Error occured - test if PostgreSQL is alive.
    psql template1 -q -c 'SHOW TimeZone;' -o /dev/null 2> /dev/null
    code=$?
    if [ "$code" -gt 0 ]; then
	if [ "$code" = "2" ]; then
	    echo "  -=> PostgreSQL does not accept connections. Is it started?"
	else
	    echo "  -=> Other PostgreSQL error ($code)"
	fi
    fi
else
    cat $TMPFILE | bzip2 > $BACKUPFILE9
    rm -f $TMPFILE
fi

# ----- M y S Q L -----
TMPFILE=`tempfile -p mysql.` ; chown mysql $TMPFILE ; chmod 600 $TMPFILE
USER=`cat /root/.my.cnf | grep ^user | sed 's@.*= @@'`
PASS=`cat /root/.my.cnf | grep ^pass | sed 's@.*= @@'`
/usr/bin/mysqldump -u $USER --password=$PASS -A --opt > $TMPFILE
code=$? ; check_error "$?" "MySQL database(s)"
if [ "$code" = "0" ]; then
    cat $TMPFILE | bzip2 > $BACKUPFILE2
    rm -f $TMPFILE
fi

# ----- I M P O R T A N T   C O N F I G F I L E S -----
dpkg --get-selections \* | sort | gzip -f9 > $BACKUPFILE5
tar cjpsf $BACKUPFILE1 `find etc/ldap etc/krb5* etc/lvm* \
    etc/roxen2 etc/pam.d /etc/{libnss-,pam_}ldap.conf \
    etc/auto.master etc/hosts* etc/qmail etc/tcp.{smtp,qmqp} \
    etc/{nsswitch,squid,watchdog,danted,firewall.block,firewall}.conf \
    usr/lib/squid/ldap_auth.alan_sparks etc/apache etc/cron* \
    etc/init.d/{qmail,firewall} etc/profile etc/courier \
    etc/logcheck/ignore.d.server/papadoc etc/xinetd.d \
    etc/krb5.keytab* etc/postgresql/{pg_hba,postgresql}.conf \
    etc/ssl/{openssl.cnf,CA,certs} $BACKUPFILE5 -type f \
    | egrep -v '~$' | sed -e 's@^/@@' -e 's@\.dpkg-dist@@' | sort`
check_error "$?" "misc config files"

# -----------------
# AFBackup var directory for easy restore incase of crash
DIR="var/lib/afbackup etc/afbackup" ; X=
for dir in $DIR; do
    if [ -d $dir ]; then
	X="$X $dir"
    fi
done
if [ ! -z "$X" ]; then
    tar cjpsf $BACKUPFILE8 $X
    check_error "$?" "AfBackup directories"
fi

# -----------------
# Some important files...
kinit -l 4m -k -t /etc/krb5.keytab.webserver webserver@BAYOUR.COM && aklog
mkdir /tmp/$$ && chmod 700 /tmp/$$ && ( \
    cd /var/www/bayour && cp LDAPv3-HOWTO.html /tmp/$$; \
    find kerberos openldap | cpio -p /tmp/$$ 2> /dev/null; \
    cd /afs/bayour.com/user/fredriksson/turbo/secret && \
    mkdir /tmp/$$/Implementing_LDAPv3 && \
    find LDAPv3 | cpio -vp /tmp/$$/Implementing_LDAPv3 2> /dev/null; \
    cd /var/www/bayour/secret.old/LDAPv3/Softwares && \
    find -type f -exec ls -ln {} \; > /tmp/$$/LDAPv3_install.filelist; \
) && cd /tmp/$$ && tar cjpsf $BACKUPFILE6 . && rm -R /tmp/$$
check_error "$?" "very important files"
unlog && kdestroy

# -----------------
# CVS archive
cd / && tar cjpsf $BACKUPFILE10 var/cvs
check_error "$?" "CVS repository"

# -----------------
# Logfiles...
TMP=`find /var/log/*.gz 2> /dev/null | head -n1`
if [ ! -z $TMP ]; then
    cd /var/log && tar --remove-files -cjf $BACKUPFILE7 `find -name '*.gz'`
    check_error "$?" "old logfiles"
fi

# -----------------
for file in $BACKUPFILES; do
    chgrp backup $file
    chmod 640    $file
done
rm -f $BACKUPFILE5

echo "Ending system backup at" `date +"%Y%m%d %H:%M:%S"`
echo

# -----------------
# Backup the AFS volumes
if [ -x /usr/local/sbin/backup_afs.sh ]; then
    echo "Starting AFS volume backup at" `date +"%Y%m%d %H:%M:%S"`

    # Do we backup odd or even weeks?
    ODD=`expr \`date +"%V"\` % 2`
    DAY=`date +"%w"`
    if [ "$DAY" = "1" -o "$BACKUP_TYPE" == "full" ]; then
	# This is a monday (or we've specified full backup), clean
	# the backup directory. We'll have PREVIOUS weeks backup(s)
	# intact -> At least one weeks of backup(s) online.

# Unfortunatly I don't have enough space on my backup partition
# to save two full weeks, therefor I'm deleting ALL backups, and
# start over. HOPFULLY it's saved to tape by now...
#
# If you HAVE enough room for two full weeks, uncomment the if/else/fi
# lines below.
#	if [ "$ODD" != "1" ]; then
	    # Odd weeks
	    rm -f $BACKUPVOLDIR/odd/*
#	else
	    # Even weeks
	    rm -f $BACKUPVOLDIR/even/*
#	fi

	# Do a FULL backup
	/usr/local/sbin/backup_afs.sh 2>&1
    else
	# Do a INCREMENTAL volume backup
	/usr/local/sbin/backup_afs.sh -i 2>&1
    fi

    echo "Ending AFS volume backup at" `date +"%Y%m%d %H:%M:%S"`
    echo
fi

if [ "$BACKUP_TYPE" == "incr" ]; then
    # Do a INCREMENTAL backup to tape
    incr_backup -d
elif [ "$BACKUP_TYPE" == "full" ]; then
    # Do a FULL backup to tape
    full_backup -d
fi
echo

